// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sGHXXiFJtxEudrKmGY7eVc
// Component: T1m598nICr
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import {
	hasVariant,
	classNames,
	wrapWithClassName,
	createPlasmicElementProxy,
	makeFragment,
	MultiChoiceArg,
	SingleBooleanChoiceArg,
	SingleChoiceArg,
	pick,
	omit,
	useTrigger,
	StrictProps,
	deriveRenderOpts,
	ensureGlobalVariants
} from '@plasmicapp/react-web';

import { useScreenVariants } from './PlasmicGlobalVariant__Screen'; // plasmic-import: mxXjSAVsL22J/globalVariant

import '@plasmicapp/react-web/lib/plasmic.css';
import * as defaultcss from '../plasmic__default_style.module.css'; // plasmic-import: global/defaultcss
import * as projectcss from './plasmic_blank_project_mobile_first.module.css'; // plasmic-import: sGHXXiFJtxEudrKmGY7eVc/projectcss
import * as sty from './PlasmicCtest.module.css'; // plasmic-import: T1m598nICr/css

export type PlasmicCtest__VariantMembers = {};

export type PlasmicCtest__VariantsArgs = {};
type VariantPropType = keyof PlasmicCtest__VariantsArgs;
export const PlasmicCtest__VariantProps = new Array<VariantPropType>();

export type PlasmicCtest__ArgsType = {};
type ArgPropType = keyof PlasmicCtest__ArgsType;
export const PlasmicCtest__ArgProps = new Array<ArgPropType>();

export type PlasmicCtest__OverridesType = {
	root?: p.Flex<'div'>;
};

export interface DefaultCtestProps {
	className?: string;
}

function PlasmicCtest__RenderFunc(props: {
	variants: PlasmicCtest__VariantsArgs;
	args: PlasmicCtest__ArgsType;
	overrides: PlasmicCtest__OverridesType;
	dataFetches?: PlasmicCtest__Fetches;
	forNode?: string;
}) {
	const { variants, args, overrides, forNode, dataFetches } = props;

	const globalVariants = ensureGlobalVariants({
		screen: useScreenVariants()
	});

	return (true ? (
		<div
			data-plasmic-name={'root'}
			data-plasmic-override={overrides.root}
			data-plasmic-root={true}
			data-plasmic-for-node={forNode}
			className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
		/>
	) : null) as React.ReactElement | null;
}

const PlasmicDescendants = {
	root: ['root']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
	root: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicCtest__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
	variants?: PlasmicCtest__VariantsArgs;
	args?: PlasmicCtest__ArgsType;
	overrides?: NodeOverridesType<T>;
	dataFetches?: PlasmicCtest__Fetches;
} & Omit<PlasmicCtest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
	// Specify args directly as props
	Omit<PlasmicCtest__ArgsType, ReservedPropsType> &
	// Specify overrides for each element directly as props
	Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
	// Specify props for the root element
	Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
	type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
	const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
		const { variants, args, overrides } = deriveRenderOpts(props, {
			name: nodeName,
			descendantNames: [...PlasmicDescendants[nodeName]],
			internalArgPropNames: PlasmicCtest__ArgProps,
			internalVariantPropNames: PlasmicCtest__VariantProps
		});

		const { dataFetches } = props;

		return PlasmicCtest__RenderFunc({
			variants,
			args,
			overrides,
			dataFetches,
			forNode: nodeName
		});
	};
	if (nodeName === 'root') {
		func.displayName = 'PlasmicCtest';
	} else {
		func.displayName = `PlasmicCtest.${nodeName}`;
	}
	return func;
}

export const PlasmicCtest = Object.assign(
	// Top-level PlasmicCtest renders the root element
	makeNodeComponent('root'),
	{
		// Helper components rendering sub-elements

		// Metadata about props expected for PlasmicCtest
		internalVariantProps: PlasmicCtest__VariantProps,
		internalArgProps: PlasmicCtest__ArgProps
	}
);

export default PlasmicCtest;
/* prettier-ignore-end */

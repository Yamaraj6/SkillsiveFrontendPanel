// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sGHXXiFJtxEudrKmGY7eVc
// Component: o-tQV3Qu4B
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import {
	hasVariant,
	classNames,
	wrapWithClassName,
	createPlasmicElementProxy,
	makeFragment,
	MultiChoiceArg,
	SingleBooleanChoiceArg,
	SingleChoiceArg,
	pick,
	omit,
	useTrigger,
	StrictProps,
	deriveRenderOpts,
	ensureGlobalVariants
} from '@plasmicapp/react-web';
import InputP from '../../InputP'; // plasmic-import: EI2IZZAvPf/component
import ButtonBase from '../../ButtonBase'; // plasmic-import: dynsQ2nrxe/component

import '@plasmicapp/react-web/lib/plasmic.css';
import * as defaultcss from '../plasmic__default_style.module.css'; // plasmic-import: global/defaultcss
import * as projectcss from './plasmic_skillsive_sandbox.module.css'; // plasmic-import: sGHXXiFJtxEudrKmGY7eVc/projectcss
import * as sty from './PlasmicThreeInputsAndButton.module.css'; // plasmic-import: o-tQV3Qu4B/css

export type PlasmicThreeInputsAndButton__VariantMembers = {};

export type PlasmicThreeInputsAndButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicThreeInputsAndButton__VariantsArgs;
export const PlasmicThreeInputsAndButton__VariantProps = new Array<VariantPropType>();

export type PlasmicThreeInputsAndButton__ArgsType = {};
type ArgPropType = keyof PlasmicThreeInputsAndButton__ArgsType;
export const PlasmicThreeInputsAndButton__ArgProps = new Array<ArgPropType>();

export type PlasmicThreeInputsAndButton__OverridesType = {
	root?: p.Flex<'div'>;
	p?: p.Flex<'p'>;
	email?: p.Flex<typeof InputP>;
	label?: p.Flex<'label'>;
	password?: p.Flex<typeof InputP>;
	address?: p.Flex<typeof InputP>;
	buttonBase?: p.Flex<typeof ButtonBase>;
};

export interface DefaultThreeInputsAndButtonProps {
	className?: string;
}

function PlasmicThreeInputsAndButton__RenderFunc(props: {
	variants: PlasmicThreeInputsAndButton__VariantsArgs;
	args: PlasmicThreeInputsAndButton__ArgsType;
	overrides: PlasmicThreeInputsAndButton__OverridesType;
	dataFetches?: PlasmicThreeInputsAndButton__Fetches;
	forNode?: string;
}) {
	const { variants, args, overrides, forNode, dataFetches } = props;

	return (
		<div
			data-plasmic-name={'root'}
			data-plasmic-override={overrides.root}
			data-plasmic-root={true}
			data-plasmic-for-node={forNode}
			className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
		>
			<div className={classNames(defaultcss.all, sty.box___2Cpau)}>
				<p
					data-plasmic-name={'p'}
					data-plasmic-override={overrides.p}
					className={classNames(defaultcss.all, defaultcss.__wab_text, sty.p)}
				>
					{'Email'}
				</p>

				<InputP
					data-plasmic-name={'email'}
					data-plasmic-override={overrides.email}
					className={classNames('__wab_instance', sty.email)}
				/>
			</div>

			<div className={classNames(defaultcss.all, sty.box__kxvq3)}>
				<label
					data-plasmic-name={'label'}
					data-plasmic-override={overrides.label}
					className={classNames(defaultcss.all, defaultcss.__wab_text, sty.label)}
				>
					{'Password'}
				</label>

				<InputP
					data-plasmic-name={'password'}
					data-plasmic-override={overrides.password}
					className={classNames('__wab_instance', sty.password)}
				/>
			</div>

			<div className={classNames(defaultcss.all, sty.box__rwsfX)}>
				<div className={classNames(defaultcss.all, defaultcss.__wab_text, sty.box__e8U5Y)}>{'Address'}</div>

				<InputP
					data-plasmic-name={'address'}
					data-plasmic-override={overrides.address}
					className={classNames('__wab_instance', sty.address)}
				/>
			</div>

			<ButtonBase
				data-plasmic-name={'buttonBase'}
				data-plasmic-override={overrides.buttonBase}
				className={classNames('__wab_instance', sty.buttonBase)}
			/>
		</div>
	) as React.ReactElement | null;
}

const PlasmicDescendants = {
	root: ['root', 'p', 'email', 'label', 'password', 'address', 'buttonBase'],
	p: ['p'],
	email: ['email'],
	label: ['label'],
	password: ['password'],
	address: ['address'],
	buttonBase: ['buttonBase']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
	root: 'div';
	p: 'p';
	email: typeof InputP;
	label: 'label';
	password: typeof InputP;
	address: typeof InputP;
	buttonBase: typeof ButtonBase;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicThreeInputsAndButton__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
	variants?: PlasmicThreeInputsAndButton__VariantsArgs;
	args?: PlasmicThreeInputsAndButton__ArgsType;
	overrides?: NodeOverridesType<T>;
	dataFetches?: PlasmicThreeInputsAndButton__Fetches;
} & Omit<PlasmicThreeInputsAndButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
	// Specify args directly as props
	Omit<PlasmicThreeInputsAndButton__ArgsType, ReservedPropsType> &
	// Specify overrides for each element directly as props
	Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
	// Specify props for the root element
	Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
	type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
	const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
		const { variants, args, overrides } = deriveRenderOpts(props, {
			name: nodeName,
			descendantNames: [...PlasmicDescendants[nodeName]],
			internalArgPropNames: PlasmicThreeInputsAndButton__ArgProps,
			internalVariantPropNames: PlasmicThreeInputsAndButton__VariantProps
		});

		const { dataFetches } = props;

		return PlasmicThreeInputsAndButton__RenderFunc({
			variants,
			args,
			overrides,
			dataFetches,
			forNode: nodeName
		});
	};
	if (nodeName === 'root') {
		func.displayName = 'PlasmicThreeInputsAndButton';
	} else {
		func.displayName = `PlasmicThreeInputsAndButton.${nodeName}`;
	}
	return func;
}

export const PlasmicThreeInputsAndButton = Object.assign(
	// Top-level PlasmicThreeInputsAndButton renders the root element
	makeNodeComponent('root'),
	{
		// Helper components rendering sub-elements
		p: makeNodeComponent('p'),
		email: makeNodeComponent('email'),
		label: makeNodeComponent('label'),
		password: makeNodeComponent('password'),
		address: makeNodeComponent('address'),
		buttonBase: makeNodeComponent('buttonBase'),

		// Metadata about props expected for PlasmicThreeInputsAndButton
		internalVariantProps: PlasmicThreeInputsAndButton__VariantProps,
		internalArgProps: PlasmicThreeInputsAndButton__ArgProps
	}
);

export default PlasmicThreeInputsAndButton;
/* prettier-ignore-end */

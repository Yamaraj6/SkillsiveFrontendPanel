// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sGHXXiFJtxEudrKmGY7eVc
// Component: zrs6XL3goK
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import {
	hasVariant,
	classNames,
	wrapWithClassName,
	createPlasmicElementProxy,
	makeFragment,
	MultiChoiceArg,
	SingleBooleanChoiceArg,
	SingleChoiceArg,
	pick,
	omit,
	useTrigger,
	StrictProps,
	deriveRenderOpts,
	ensureGlobalVariants
} from '@plasmicapp/react-web';
import InputP from '../../InputP'; // plasmic-import: EI2IZZAvPf/component

import '@plasmicapp/react-web/lib/plasmic.css';
import * as defaultcss from '../plasmic__default_style.module.css'; // plasmic-import: global/defaultcss
import * as projectcss from './plasmic_skillsive_sandbox.module.css'; // plasmic-import: sGHXXiFJtxEudrKmGY7eVc/projectcss
import * as sty from './PlasmicTwoInpusXxx.module.css'; // plasmic-import: zrs6XL3goK/css

export type PlasmicTwoInpusXxx__VariantMembers = {};

export type PlasmicTwoInpusXxx__VariantsArgs = {};
type VariantPropType = keyof PlasmicTwoInpusXxx__VariantsArgs;
export const PlasmicTwoInpusXxx__VariantProps = new Array<VariantPropType>();

export type PlasmicTwoInpusXxx__ArgsType = {
	children?: React.ReactNode;
	xd?: string;
	test?: string;
};

type ArgPropType = keyof PlasmicTwoInpusXxx__ArgsType;
export const PlasmicTwoInpusXxx__ArgProps = new Array<ArgPropType>('children', 'xd', 'test');

export type PlasmicTwoInpusXxx__OverridesType = {
	root?: p.Flex<'div'>;
	test?: p.Flex<'code'>;
	textbox?: p.Flex<'input'>;
};

export interface DefaultTwoInpusXxxProps {
	children?: React.ReactNode;
	xd?: string;
	test?: string;
	className?: string;
}

function PlasmicTwoInpusXxx__RenderFunc(props: {
	variants: PlasmicTwoInpusXxx__VariantsArgs;
	args: PlasmicTwoInpusXxx__ArgsType;
	overrides: PlasmicTwoInpusXxx__OverridesType;
	dataFetches?: PlasmicTwoInpusXxx__Fetches;
	forNode?: string;
}) {
	const { variants, args, overrides, forNode, dataFetches } = props;

	return (
		<div
			data-plasmic-name={'root'}
			data-plasmic-override={overrides.root}
			data-plasmic-root={true}
			data-plasmic-for-node={forNode}
			className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
		>
			{p.renderPlasmicSlot({
				defaultContents: <InputP className={classNames('__wab_instance', sty.inputP__i7Okm)} />,

				value: args.children
			})}

			{true ? <InputP className={classNames('__wab_instance', sty.inputP__dlQuK)} /> : null}
			{true ? <InputP className={classNames('__wab_instance', sty.inputP__nJm4O)} /> : null}

			<code
				data-plasmic-name={'test'}
				data-plasmic-override={overrides.test}
				className={classNames(defaultcss.code, sty.test)}
				title={args.xd}
			/>

			<input
				data-plasmic-name={'textbox'}
				data-plasmic-override={overrides.textbox}
				className={classNames(defaultcss.input, sty.textbox)}
				placeholder={args.xd}
				size={1 as const}
				type={'text' as const}
				value={args.xd}
			/>
		</div>
	) as React.ReactElement | null;
}

const PlasmicDescendants = {
	root: ['root', 'test', 'textbox'],
	test: ['test'],
	textbox: ['textbox']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
	root: 'div';
	test: 'code';
	textbox: 'input';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicTwoInpusXxx__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
	variants?: PlasmicTwoInpusXxx__VariantsArgs;
	args?: PlasmicTwoInpusXxx__ArgsType;
	overrides?: NodeOverridesType<T>;
	dataFetches?: PlasmicTwoInpusXxx__Fetches;
} & Omit<PlasmicTwoInpusXxx__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
	// Specify args directly as props
	Omit<PlasmicTwoInpusXxx__ArgsType, ReservedPropsType> &
	// Specify overrides for each element directly as props
	Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
	// Specify props for the root element
	Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
	type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
	const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
		const { variants, args, overrides } = deriveRenderOpts(props, {
			name: nodeName,
			descendantNames: [...PlasmicDescendants[nodeName]],
			internalArgPropNames: PlasmicTwoInpusXxx__ArgProps,
			internalVariantPropNames: PlasmicTwoInpusXxx__VariantProps
		});

		const { dataFetches } = props;

		return PlasmicTwoInpusXxx__RenderFunc({
			variants,
			args,
			overrides,
			dataFetches,
			forNode: nodeName
		});
	};
	if (nodeName === 'root') {
		func.displayName = 'PlasmicTwoInpusXxx';
	} else {
		func.displayName = `PlasmicTwoInpusXxx.${nodeName}`;
	}
	return func;
}

export const PlasmicTwoInpusXxx = Object.assign(
	// Top-level PlasmicTwoInpusXxx renders the root element
	makeNodeComponent('root'),
	{
		// Helper components rendering sub-elements
		test: makeNodeComponent('test'),
		textbox: makeNodeComponent('textbox'),

		// Metadata about props expected for PlasmicTwoInpusXxx
		internalVariantProps: PlasmicTwoInpusXxx__VariantProps,
		internalArgProps: PlasmicTwoInpusXxx__ArgProps
	}
);

export default PlasmicTwoInpusXxx;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sGHXXiFJtxEudrKmGY7eVc
// Component: dynsQ2nrxe
import * as React from 'react';

import Head from 'next/head';
import Link, { LinkProps } from 'next/link';

import * as p from '@plasmicapp/react-web';
import {
	hasVariant,
	classNames,
	wrapWithClassName,
	createPlasmicElementProxy,
	makeFragment,
	MultiChoiceArg,
	SingleBooleanChoiceArg,
	SingleChoiceArg,
	pick,
	omit,
	useTrigger,
	StrictProps,
	deriveRenderOpts,
	ensureGlobalVariants
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';
import * as defaultcss from '../plasmic__default_style.module.css'; // plasmic-import: global/defaultcss
import * as projectcss from './plasmic_skillsive_sandbox.module.css'; // plasmic-import: sGHXXiFJtxEudrKmGY7eVc/projectcss
import * as sty from './PlasmicButtonBase.module.css'; // plasmic-import: dynsQ2nrxe/css

export type PlasmicButtonBase__VariantMembers = {};

export type PlasmicButtonBase__VariantsArgs = {};
type VariantPropType = keyof PlasmicButtonBase__VariantsArgs;
export const PlasmicButtonBase__VariantProps = new Array<VariantPropType>();

export type PlasmicButtonBase__ArgsType = {};
type ArgPropType = keyof PlasmicButtonBase__ArgsType;
export const PlasmicButtonBase__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonBase__OverridesType = {
	root?: p.Flex<'button'>;
};

export interface DefaultButtonBaseProps {
	className?: string;
}

function PlasmicButtonBase__RenderFunc(props: {
	variants: PlasmicButtonBase__VariantsArgs;
	args: PlasmicButtonBase__ArgsType;
	overrides: PlasmicButtonBase__OverridesType;
	dataFetches?: PlasmicButtonBase__Fetches;
	forNode?: string;
}) {
	const { variants, args, overrides, forNode, dataFetches } = props;

	return (true ? (
		<button
			data-plasmic-name={'root'}
			data-plasmic-override={overrides.root}
			data-plasmic-root={true}
			data-plasmic-for-node={forNode}
			className={classNames(defaultcss.button, defaultcss.__wab_text, projectcss.root_reset, sty.root)}
		>
			{'Click Me'}
		</button>
	) : null) as React.ReactElement | null;
}

const PlasmicDescendants = {
	root: ['root']
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
	root: 'button';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicButtonBase__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
	variants?: PlasmicButtonBase__VariantsArgs;
	args?: PlasmicButtonBase__ArgsType;
	overrides?: NodeOverridesType<T>;
	dataFetches?: PlasmicButtonBase__Fetches;
} & Omit<PlasmicButtonBase__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
	// Specify args directly as props
	Omit<PlasmicButtonBase__ArgsType, ReservedPropsType> &
	// Specify overrides for each element directly as props
	Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
	// Specify props for the root element
	Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
	type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
	const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
		const { variants, args, overrides } = deriveRenderOpts(props, {
			name: nodeName,
			descendantNames: [...PlasmicDescendants[nodeName]],
			internalArgPropNames: PlasmicButtonBase__ArgProps,
			internalVariantPropNames: PlasmicButtonBase__VariantProps
		});

		const { dataFetches } = props;

		return PlasmicButtonBase__RenderFunc({
			variants,
			args,
			overrides,
			dataFetches,
			forNode: nodeName
		});
	};
	if (nodeName === 'root') {
		func.displayName = 'PlasmicButtonBase';
	} else {
		func.displayName = `PlasmicButtonBase.${nodeName}`;
	}
	return func;
}

export const PlasmicButtonBase = Object.assign(
	// Top-level PlasmicButtonBase renders the root element
	makeNodeComponent('root'),
	{
		// Helper components rendering sub-elements

		// Metadata about props expected for PlasmicButtonBase
		internalVariantProps: PlasmicButtonBase__VariantProps,
		internalArgProps: PlasmicButtonBase__ArgProps
	}
);

export default PlasmicButtonBase;
/* prettier-ignore-end */
